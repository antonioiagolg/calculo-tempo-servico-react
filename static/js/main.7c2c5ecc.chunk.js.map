{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dataInicio","dataFim","diferenca","diferencaDias","calculaDiferenca","bind","assertThisInitialized","nomeCampo","event","setState","defineProperty","target","value","preventDefault","moment","preciseDiff","diff","diferencaToString","getStringDiferenca","years","months","days","hours","minutes","seconds","react_default","a","createElement","className","htmlFor","react_input_mask_default","maskChar","id","onChange","setCampo","mask","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c2c5ecc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport InputMask from 'react-input-mask';\nimport './sass/app-style.scss';\nimport * as moment from 'moment';\nimport 'moment-precise-range-plugin/moment-precise-range';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dataInicio: '',\n      dataFim: '',\n      diferenca: 'Aguardando...',\n      diferencaDias: 'Aguardando...'\n    };\n    \n    this.calculaDiferenca = this.calculaDiferenca.bind(this)\n  }\n\n  setCampo(nomeCampo, event) {\n    this.setState({[nomeCampo]: event.target.value});\n  }\n\n  calculaDiferenca(event) {\n    event.preventDefault();\n    let dataInicio = this.state.dataInicio;\n    let dataFim = this.state.dataFim;\n    let diferenca = moment(dataInicio, \"DD/MM/YYYY\").preciseDiff(moment(dataFim, \"DD/MM/YYYY\"), true);\n    let diferencaDias = moment(dataFim, \"DD/MM/YYYY\").diff(moment(dataInicio, \"DD/MM/YYYY\"), \"days\");\n\n    let diferencaToString = this.getStringDiferenca(diferenca);\n\n    this.setState({diferenca: diferencaToString});\n    this.setState({diferencaDias: diferencaDias + \" dia(s)\"});\n  }\n\n  getStringDiferenca(diferenca) {\n    return diferenca.years + \" ano(s), \" +\n          diferenca.months + \" mes(es), \" +\n          diferenca.days + \" dia(s), \" +\n          diferenca.hours + \" hora(s), \" +\n          diferenca.minutes + \" minuto(s), \" +\n          diferenca.seconds + \" segundo(s)\";\n\n  }\n\n  render() {\n    return (\n      <main className=\"container\">\n        <div className=\"columns\">\n          <div className=\"column is-centered\">\n            <div className=\"card\">\n              <div className=\"card-header\">\n                <p className=\"card-header-title\">\n                  Cálculo diferença entre datas\n                </p>\n              </div>\n              <div className=\"card-content\">\n                <div className=\"content\">\n                  <form>\n                    <div className=\"field\">\n                      <label className=\"label\" htmlFor=\"dataInicio\">Data de início</label>\n                      <div className=\"control\">\n                        <InputMask\n                          maskChar={null}\n                          className=\"input\"\n                          id=\"dataInicio\"\n                          value={this.state.dataInicio} \n                          onChange={this.setCampo.bind(this, 'dataInicio')} mask=\"99/99/9999\"/>\n                      </div>\n                    </div>\n                    <div className=\"field\">\n                      <label className=\"label\" htmlFor=\"dataFim\">Data fim</label>\n                      <div className=\"control\">\n                      <InputMask\n                          maskChar={null}\n                          className=\"input\"\n                          id=\"dataFim\"\n                          value={this.state.dataFim} \n                          onChange={this.setCampo.bind(this, 'dataFim')} mask=\"99/99/9999\"/>\n                      </div>\n                    </div>\n                    \n                    <button className=\"button is-info\" onClick={this.calculaDiferenca}>Calcular diferença</button>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div>\n              <p><strong>Diferença: </strong>{this.state.diferenca}</p>\n              <p><strong>Diferença(em dias): </strong>{this.state.diferencaDias}</p>\n            </div>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}